{"ast":null,"code":"import actionTypes from '../constants/actionTypes';\nimport blogReducer from '../reducers/blogReducer';\nconst env = process.env;\nfunction blogPostsFetched(blogPosts) {\n  console.log(blogPosts);\n  return {\n    type: actionTypes.FETCH_BLOG_POSTS,\n    blogPosts: blogPosts\n  };\n}\nfunction blogPostFetched(blogPost) {\n  return {\n    type: actionTypes.FETCH_BLOG_POST,\n    selectedBlogPost: blogPost\n  };\n}\nfunction blogPostSet(blogPost) {\n  console.log(blogPost);\n  return {\n    type: actionTypes.SET_BLOG_POST,\n    selectedBlogPost: blogPost\n  };\n}\nexport function setBlogPost(blogPost) {\n  return dispatch => {\n    dispatch(blogPostSet(blogPost));\n  };\n}\nexport function fetchBlogPost(blogId) {\n  return dispatch => {\n    return fetch(`${env.REACT_APP_API_URL}/blogs/${blogId}?replys=true`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': localStorage.getItem('token')\n      },\n      mode: 'cors'\n    }).then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response.json();\n    }).then(res => {\n      dispatch(blogPostFetched(res));\n    }).catch(e => console.log(e));\n  };\n}\nexport function fetchBlogPosts() {\n  return dispatch => {\n    return fetch(`${env.REACT_APP_API_URL}/blogs`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': localStorage.getItem('token')\n      },\n      mode: 'cors'\n    }).then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response.json();\n    }).then(res => {\n      dispatch(blogPostsFetched(res));\n    }).catch(e => console.log(e));\n  };\n}\nexport function submitResponse(author, blog, body) {\n  return dispatch => {\n    return fetch(`${env.REACT_APP_API_URL}/blogs/${blog}/replies`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        authorId: author,\n        blogId: blog,\n        body: body,\n        date: Date\n      }),\n      mode: 'cors'\n    }).then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response.json();\n    }).catch(e => console.log(e));\n  };\n}","map":{"version":3,"names":["actionTypes","blogReducer","env","process","blogPostsFetched","blogPosts","console","log","type","FETCH_BLOG_POSTS","blogPostFetched","blogPost","FETCH_BLOG_POST","selectedBlogPost","blogPostSet","SET_BLOG_POST","setBlogPost","dispatch","fetchBlogPost","blogId","fetch","REACT_APP_API_URL","method","headers","localStorage","getItem","mode","then","response","ok","Error","statusText","json","res","catch","e","fetchBlogPosts","submitResponse","author","blog","body","JSON","stringify","authorId","date","Date"],"sources":["/Users/brycebaker/Desktop/acm-site/src/actions/blogActions.js"],"sourcesContent":["import actionTypes from '../constants/actionTypes';\nimport blogReducer from '../reducers/blogReducer';\nconst env = process.env;\n\n\nfunction blogPostsFetched(blogPosts) {\n    console.log(blogPosts);\n    return {\n        type: actionTypes.FETCH_BLOG_POSTS,\n        blogPosts: blogPosts\n    }\n}\n\nfunction blogPostFetched(blogPost) {\n    return {\n        type: actionTypes.FETCH_BLOG_POST,\n        selectedBlogPost: blogPost\n    }\n}\n\nfunction blogPostSet(blogPost) {\n    console.log(blogPost);\n    return {\n        type: actionTypes.SET_BLOG_POST,\n        selectedBlogPost: blogPost\n    }\n}\n\nexport function setBlogPost(blogPost) {\n    return dispatch => {\n        dispatch(blogPostSet(blogPost));\n    }\n}\n\nexport function fetchBlogPost(blogId) {\n    return dispatch => {\n        return fetch(`${env.REACT_APP_API_URL}/blogs/${blogId}?replys=true`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': localStorage.getItem('token')\n            },\n            mode: 'cors'\n        }).then((response) => {\n            if (!response.ok) {\n                throw Error(response.statusText);\n            }\n            return response.json()\n        }).then((res) => {\n            dispatch(blogPostFetched(res));\n        }).catch((e) => console.log(e));\n    }\n}\n\nexport function fetchBlogPosts() {\n    return dispatch => {\n        return fetch(`${env.REACT_APP_API_URL}/blogs`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': localStorage.getItem('token')\n            },\n            mode: 'cors'\n        }).then((response) => {\n            if (!response.ok) {\n                throw Error(response.statusText);\n            }\n            return response.json()\n        }).then((res) => {\n            dispatch(blogPostsFetched(res));\n        }).catch((e) => console.log(e));\n    }\n}\n\nexport function submitResponse(author, blog, body) {\n    return dispatch => {\n        return fetch(`${env.REACT_APP_API_URL}/blogs/${blog}/replies`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': localStorage.getItem('token')\n            },\n            body: JSON.stringify({\n                authorId: author,\n                blogId: blog,\n                body: body,\n                date: Date\n            }),\n            mode: 'cors'\n        }).then((response) => {\n            if (!response.ok) {\n                throw Error(response.statusText);\n            }\n            return response.json()\n        }).catch((e) => console.log(e));\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}