{"ast":null,"code":"import actionTypes from '../constants/actionTypes';\n//import runtimeEnv from '@mars/heroku-js-runtime-env'\nconst env = process.env;\nfunction moviesFetched(movies) {\n  return {\n    type: actionTypes.FETCH_MOVIES,\n    movies: movies\n  };\n}\nfunction movieFetched(movie) {\n  return {\n    type: actionTypes.FETCH_MOVIE,\n    selectedMovie: movie\n  };\n}\nfunction movieSet(movie) {\n  return {\n    type: actionTypes.SET_MOVIE,\n    selectedMovie: movie\n  };\n}\nexport function setMovie(movie) {\n  return dispatch => {\n    dispatch(movieSet(movie));\n  };\n}\nexport function fetchMovie(movieId) {\n  return dispatch => {\n    return fetch(`${env.REACT_APP_API_URL}/movies/${movieId}?reviews=true`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': localStorage.getItem('token')\n      },\n      mode: 'cors'\n    }).then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response.json();\n    }).then(res => {\n      dispatch(movieFetched(res));\n    }).catch(e => console.log(e));\n  };\n}\nexport function fetchMovies() {\n  return dispatch => {\n    return fetch(`${env.REACT_APP_API_URL}/movies?reviews=true`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': localStorage.getItem('token')\n      },\n      mode: 'cors'\n    }).then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response.json();\n    }).then(res => {\n      dispatch(moviesFetched(res));\n    }).catch(e => console.log(e));\n  };\n}","map":{"version":3,"names":["actionTypes","env","process","moviesFetched","movies","type","FETCH_MOVIES","movieFetched","movie","FETCH_MOVIE","selectedMovie","movieSet","SET_MOVIE","setMovie","dispatch","fetchMovie","movieId","fetch","REACT_APP_API_URL","method","headers","localStorage","getItem","mode","then","response","ok","Error","statusText","json","res","catch","e","console","log","fetchMovies"],"sources":["/Users/brycebaker/Desktop/CurrentSemester/WebAPI/WEBAPI_Project/Static-Site/CSC3916_REACT/src/actions/movieActions.js"],"sourcesContent":["import actionTypes from '../constants/actionTypes';\n//import runtimeEnv from '@mars/heroku-js-runtime-env'\nconst env = process.env;\n\nfunction moviesFetched(movies) {\n    return {\n        type: actionTypes.FETCH_MOVIES,\n        movies: movies\n    }\n}\n\nfunction movieFetched(movie) {\n    return {\n        type: actionTypes.FETCH_MOVIE,\n        selectedMovie: movie\n    }\n}\n\nfunction movieSet(movie) {\n    return {\n        type: actionTypes.SET_MOVIE,\n        selectedMovie: movie\n    }\n}\n\nexport function setMovie(movie) {\n    return dispatch => {\n        dispatch(movieSet(movie));\n    }\n}\n\nexport function fetchMovie(movieId) {\n    return dispatch => {\n        return fetch(`${env.REACT_APP_API_URL}/movies/${movieId}?reviews=true`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': localStorage.getItem('token')\n            },\n            mode: 'cors'\n        }).then((response) => {\n            if (!response.ok) {\n                throw Error(response.statusText);\n            }\n            return response.json()\n        }).then((res) => {\n            dispatch(movieFetched(res));\n        }).catch((e) => console.log(e));\n    }\n}\n\nexport function fetchMovies() {\n    return dispatch => {\n        return fetch(`${env.REACT_APP_API_URL}/movies?reviews=true`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': localStorage.getItem('token')\n            },\n            mode: 'cors'\n        }).then((response) => {\n            if (!response.ok) {\n                throw Error(response.statusText);\n            }\n            return response.json()\n        }).then((res) => {\n            dispatch(moviesFetched(res));\n        }).catch((e) => console.log(e));\n    }\n}"],"mappings":"AAAA,OAAOA,WAAW,MAAM,0BAA0B;AAClD;AACA,MAAMC,GAAG,GAAGC,OAAO,CAACD,GAAG;AAEvB,SAASE,aAAaA,CAACC,MAAM,EAAE;EAC3B,OAAO;IACHC,IAAI,EAAEL,WAAW,CAACM,YAAY;IAC9BF,MAAM,EAAEA;EACZ,CAAC;AACL;AAEA,SAASG,YAAYA,CAACC,KAAK,EAAE;EACzB,OAAO;IACHH,IAAI,EAAEL,WAAW,CAACS,WAAW;IAC7BC,aAAa,EAAEF;EACnB,CAAC;AACL;AAEA,SAASG,QAAQA,CAACH,KAAK,EAAE;EACrB,OAAO;IACHH,IAAI,EAAEL,WAAW,CAACY,SAAS;IAC3BF,aAAa,EAAEF;EACnB,CAAC;AACL;AAEA,OAAO,SAASK,QAAQA,CAACL,KAAK,EAAE;EAC5B,OAAOM,QAAQ,IAAI;IACfA,QAAQ,CAACH,QAAQ,CAACH,KAAK,CAAC,CAAC;EAC7B,CAAC;AACL;AAEA,OAAO,SAASO,UAAUA,CAACC,OAAO,EAAE;EAChC,OAAOF,QAAQ,IAAI;IACf,OAAOG,KAAK,CAAE,GAAEhB,GAAG,CAACiB,iBAAkB,WAAUF,OAAQ,eAAc,EAAE;MACpEG,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,QAAQ,EAAE,kBAAkB;QAC5B,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO;MACjD,CAAC;MACDC,IAAI,EAAE;IACV,CAAC,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QACd,MAAMC,KAAK,CAACF,QAAQ,CAACG,UAAU,CAAC;MACpC;MACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CAACL,IAAI,CAAEM,GAAG,IAAK;MACbhB,QAAQ,CAACP,YAAY,CAACuB,GAAG,CAAC,CAAC;IAC/B,CAAC,CAAC,CAACC,KAAK,CAAEC,CAAC,IAAKC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC,CAAC;EACnC,CAAC;AACL;AAEA,OAAO,SAASG,WAAWA,CAAA,EAAG;EAC1B,OAAOrB,QAAQ,IAAI;IACf,OAAOG,KAAK,CAAE,GAAEhB,GAAG,CAACiB,iBAAkB,sBAAqB,EAAE;MACzDC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,QAAQ,EAAE,kBAAkB;QAC5B,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO;MACjD,CAAC;MACDC,IAAI,EAAE;IACV,CAAC,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QACd,MAAMC,KAAK,CAACF,QAAQ,CAACG,UAAU,CAAC;MACpC;MACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CAACL,IAAI,CAAEM,GAAG,IAAK;MACbhB,QAAQ,CAACX,aAAa,CAAC2B,GAAG,CAAC,CAAC;IAChC,CAAC,CAAC,CAACC,KAAK,CAAEC,CAAC,IAAKC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC,CAAC;EACnC,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}